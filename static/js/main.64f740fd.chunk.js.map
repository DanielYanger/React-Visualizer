{"version":3,"sources":["logo.svg","SortingVisualizer/mergeSort.js","SortingVisualizer/quickSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingVisualizer/bubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","auxArray","middleIndex","Math","floor","middleIdx","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","start","end","pivot","left","right","temp","SortingVisualizer","props","handleChangeSize","event","newValue","setState","array_size","handleChangeSpeed","speed","state","timeouts","isRunning","this","resetArray","sliders","document","getElementsByClassName","console","log","disabled","buttons","clearTimeout","min","max","arrayBars","random","style","backgroundColor","getBubbleSortAnimations","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","height","className","map","value","idx","key","Typography","Slider","onChange","aria-labelledby","defaultValue","onClick","mergeSort","bubbleSort","quickSort","cancelSort","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.64f740fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const mergeSort = (array) => {\r\n  if (array.length <= 1) {\r\n    return array;\r\n  }\r\n  const middleIndex = Math.floor(array.length / 2);\r\n  const firstHalf = mergeSort(array.slice(0, middleIndex));\r\n  const backHalf = mergeSort(array.slice(middleIndex));\r\n  const sortedArray = [];\r\n  let i = 0,\r\n    j = 0;\r\n  while (i < firstHalf.length && j < backHalf.length) {\r\n    if (firstHalf[i] < backHalf[j]) {\r\n      sortedArray.push(firstHalf[i++]);\r\n    } else {\r\n      sortedArray.push(backHalf[j++]);\r\n    }\r\n  }\r\n  while (i < firstHalf.length) {\r\n    sortedArray.push(firstHalf[i++]);\r\n  }\r\n  while (j < backHalf.length) {\r\n    sortedArray.push(backHalf[j++]);\r\n  }\r\n  return sortedArray;\r\n};\r\n\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxArray, animations) {\r\n  if (startIdx === endIdx) {\r\n    return;\r\n  }\r\n  const middleIndex = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxArray, startIdx, middleIndex, mainArray, animations);\r\n  mergeSortHelper(auxArray, middleIndex + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIndex, endIdx, auxArray, animations);\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxArray, animations) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    //swap to red\r\n    animations.push([i, j]);\r\n    //swap to normal\r\n    animations.push([i, j]);\r\n    //determine swap\r\n    if (auxArray[i] < auxArray[j]) {\r\n      animations.push([k, auxArray[i]]);\r\n      mainArray[k++] = auxArray[i++];\r\n    } else {\r\n      animations.push([k, auxArray[j]]);\r\n      mainArray[k++] = auxArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, auxArray[i]]);\r\n    mainArray[k++] = auxArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, auxArray[j]]);\r\n    mainArray[k++] = auxArray[j++];\r\n  }\r\n}\r\n","export function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) {\r\n    return animations;\r\n  }\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(array, start, end, animations) {\r\n  if (start >= end) {\r\n    return;\r\n  }\r\n  let pivot = start,\r\n    left = start + 1,\r\n    right = end;\r\n\r\n  while (right >= left) {\r\n    if (array[right] < array[pivot] && array[left] > array[pivot]) {\r\n      animations.push([left, right]);\r\n      animations.push([left, right]);\r\n      animations.push([left, array[right]]);\r\n      animations.push([right, array[left]]);\r\n\r\n      let temp = array[right];\r\n      array[right] = array[left];\r\n      array[left] = temp;\r\n    }\r\n    if (array[right] >= array[pivot]) {\r\n      right--;\r\n    }\r\n    if (array[left] <= array[pivot]) {\r\n      left++;\r\n    }\r\n  }\r\n  if (pivot !== right) {\r\n    animations.push([pivot, right]);\r\n    animations.push([pivot, right]);\r\n    animations.push([pivot, array[right]]);\r\n    animations.push([right, array[pivot]]);\r\n\r\n    let temp = array[right];\r\n    array[right] = array[pivot];\r\n    array[pivot] = temp;\r\n  }\r\n  quickSortHelper(array, start, right - 1, animations);\r\n  quickSortHelper(array, right + 1, end, animations);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport \"./SortingVisualizer.css\";\r\nimport { getMergeSortAnimations } from \"./mergeSort.js\";\r\nimport { getBubbleSortAnimations } from \"./bubbleSort.js\";\r\nimport { getQuickSortAnimations } from \"./quickSort.js\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst max_height_bar = 600;\r\n\r\nconst primary_color = \"turquoise\";\r\nconst secondary_color = \"red\";\r\nconst finish_color = \"lawngreen\";\r\n\r\nexport default class SortingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n      timeouts: [],\r\n      array_size: 200,\r\n      speed: 3,\r\n      isRunning: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  cancelSort() {\r\n    //sliders\r\n    const sliders = document.getElementsByClassName(\"slider\");\r\n    console.log(sliders);\r\n    sliders[0].disabled = false;\r\n    sliders[1].disabled = false;\r\n\r\n    //buttons\r\n    const buttons = document.getElementsByClassName(\"button\");\r\n    buttons[0].disabled = false; //generate array button\r\n    buttons[1].disabled = false; //merge sort button\r\n    buttons[2].disabled = false; //bubble sort button\r\n    buttons[3].disabled = false; //quick sort button\r\n    buttons[4].disabled = true; //cancel sort button\r\n    for (let i = 0; i < this.state.timeouts.length; i++) {\r\n      clearTimeout(this.state.timeouts[i]);\r\n    }\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    //sliders\r\n    const sliders = document.getElementsByClassName(\"slider\");\r\n    sliders[0].disabled = false;\r\n    sliders[1].disabled = false;\r\n\r\n    //buttons\r\n    const buttons = document.getElementsByClassName(\"button\");\r\n    buttons[0].disabled = false; //generate array button\r\n    buttons[1].disabled = false; //merge sort button\r\n    buttons[2].disabled = false; //bubble sort button\r\n    buttons[3].disabled = false; //quick sort button\r\n    buttons[4].disabled = true; //cancel sort button\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    const array = [];\r\n    for (let i = 0; i < this.state.array_size; i++) {\r\n      array.push(randomIntFromInterval(10, max_height_bar));\r\n    }\r\n    this.setState({ array });\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      arrayBars[i].style.backgroundColor = primary_color;\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    //sliders\r\n    const sliders = document.getElementsByClassName(\"slider\");\r\n    sliders[0].disabled = true;\r\n    sliders[1].disabled = true;\r\n\r\n    //buttons\r\n    const buttons = document.getElementsByClassName(\"button\");\r\n    buttons[0].disabled = true; //generate array button\r\n    buttons[1].disabled = true; //merge sort button\r\n    buttons[2].disabled = true; //bubble sort button\r\n    buttons[3].disabled = true; //quick sort button\r\n    buttons[4].disabled = false; //canel sort button\r\n\r\n    //array of all the timeouts for canceling\r\n    const timeouts = [];\r\n\r\n    //list of all of the animations that need to be exectuted\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n\r\n    //list of all the bars of the array to be sorted\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    //main animation loop\r\n    for (let i = 0; i < animations.length; i++) {\r\n      //all animations come in set of 3\r\n      //1: change color of the compared bars back to secondary color\r\n      //2: change color of the compared bars back to primary color\r\n      //3: change the height of one of the bars\r\n      const isColorChange = i % 3 !== 2;\r\n\r\n      //Color changing loop\r\n      if (isColorChange) {\r\n        //getting the index and then style of which bars to change\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        //the first time is for changing to secondary color, second time is for changing back to primary\r\n        const color = i % 3 === 0 ? secondary_color : primary_color;\r\n\r\n        //adding the timeout to the list so the cancel feature works\r\n        timeouts.push(\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * this.state.speed)\r\n        );\r\n      } else {\r\n        //pushing a timeout to change the height of the bar\r\n        timeouts.push(\r\n          setTimeout(() => {\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const height = newHeight + \"px\";\r\n            barOneStyle.height = height;\r\n          }, i * this.state.speed)\r\n        );\r\n      }\r\n    }\r\n\r\n    //aux loop for changing the color to the finish color after completion\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      //push the change to the timeout array\r\n      timeouts.push(\r\n        setTimeout(() => {\r\n          arrayBars[i].style.backgroundColor = finish_color;\r\n        }, animations.length * this.state.speed + i * 2)\r\n      );\r\n    }\r\n\r\n    //changing the buttons back to enabled\r\n    timeouts.push(\r\n      setTimeout(() => {\r\n        //sliders\r\n        sliders[0].disabled = false;\r\n        sliders[1].disabled = false;\r\n        //buttons\r\n        buttons[0].disabled = false;\r\n        buttons[1].disabled = true;\r\n        buttons[2].disabled = true;\r\n        buttons[3].disabled = true;\r\n        buttons[4].disabled = true;\r\n      }, animations.length * this.state.speed + arrayBars.length * 2)\r\n    );\r\n    //setting the state of the timeouts\r\n    // eslint-disable-next-line\r\n    this.state.timeouts = timeouts;\r\n  }\r\n\r\n  mergeSort() {\r\n    //sliders\r\n    const sliders = document.getElementsByClassName(\"slider\");\r\n    sliders[0].disabled = true;\r\n    sliders[1].disabled = true;\r\n\r\n    //buttons\r\n    const buttons = document.getElementsByClassName(\"button\");\r\n    buttons[0].disabled = true; //generate array button\r\n    buttons[1].disabled = true; //merge sort button\r\n    buttons[2].disabled = true; //bubble sort button\r\n    buttons[3].disabled = true; //quick sort button\r\n    buttons[4].disabled = false; //canel sort button\r\n\r\n    //array of all the timeouts for canceling\r\n    const timeouts = [];\r\n\r\n    //list of all of the animations that need to be exectuted\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n\r\n    //list of all the bars of the array to be sorted\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    //main animation loop\r\n    for (let i = 0; i < animations.length; i++) {\r\n      //all animations come in set of 3\r\n      //1: change color of the compared bars back to secondary color\r\n      //2: change color of the compared bars back to primary color\r\n      //3: change the height of one of the bars\r\n      const isColorChange = i % 3 !== 2;\r\n\r\n      //Color changing loop\r\n      if (isColorChange) {\r\n        //getting the index of and then style  which bars to change\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        //the first time is for changing to secondary color, second time is for changing back to primary\r\n        const color = i % 3 === 0 ? secondary_color : primary_color;\r\n\r\n        //adding the timeout to the list so the cancel feature works\r\n        timeouts.push(\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * this.state.speed)\r\n        );\r\n      } else {\r\n        //pushing a timeout to change the height of the bar\r\n        timeouts.push(\r\n          setTimeout(() => {\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const height = newHeight + \"px\";\r\n            barOneStyle.height = height;\r\n          }, i * this.state.speed)\r\n        );\r\n      }\r\n    }\r\n\r\n    //aux loop for changing the color to the finish color after completion\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      //push the change to the timeout array\r\n      timeouts.push(\r\n        setTimeout(() => {\r\n          arrayBars[i].style.backgroundColor = finish_color;\r\n        }, animations.length * this.state.speed + i * 2)\r\n      );\r\n    }\r\n\r\n    //changing the buttons back to enabled\r\n    timeouts.push(\r\n      setTimeout(() => {\r\n        //sliders\r\n        sliders[0].disabled = false;\r\n        sliders[1].disabled = false;\r\n\r\n        //buttons\r\n        buttons[0].disabled = false;\r\n        buttons[1].disabled = true;\r\n        buttons[2].disabled = true;\r\n        buttons[3].disabled = true;\r\n        buttons[4].disabled = true;\r\n      }, animations.length * this.state.speed + arrayBars.length * 2)\r\n    );\r\n    //setting the state of the timeouts\r\n    // eslint-disable-next-line\r\n    this.state.timeouts = timeouts;\r\n  }\r\n\r\n  quickSort() {\r\n    //sliders\r\n    const sliders = document.getElementsByClassName(\"slider\");\r\n    sliders[0].disabled = true;\r\n    sliders[1].disabled = true;\r\n\r\n    const buttons = document.getElementsByClassName(\"button\");\r\n    buttons[0].disabled = true; //generate array button\r\n    buttons[1].disabled = true; //merge sort button\r\n    buttons[2].disabled = true; //bubble sort button\r\n    buttons[3].disabled = true; //quick sort button\r\n    buttons[4].disabled = false; //canel sort button\r\n\r\n    //array of all the timeouts for canceling\r\n    const timeouts = [];\r\n\r\n    //list of all of the animations that need to be exectuted\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n\r\n    //list of all the bars of the array to be sorted\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    //main animation loop\r\n    for (let i = 0; i < animations.length; i++) {\r\n      //all animations come in set of 3\r\n      //1: change color of the compared bars back to secondary color\r\n      //2: change color of the compared bars back to primary color\r\n      //3: change the height of one of the bars\r\n      const isColorChange = i % 4 !== 2 && i % 4 !== 3;\r\n      //Color changing loop\r\n      if (isColorChange) {\r\n        //getting the index of and then style  which bars to change\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        //the first time is for changing to secondary color, second time is for changing back to primary\r\n        const color = i % 4 === 0 ? secondary_color : primary_color;\r\n\r\n        //adding the timeout to the list so the cancel feature works\r\n        timeouts.push(\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * this.state.speed)\r\n        );\r\n      } else {\r\n        //pushing a timeout to change the height of the bar\r\n        timeouts.push(\r\n          setTimeout(() => {\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const height = newHeight + \"px\";\r\n            barOneStyle.height = height;\r\n          }, i * this.state.speed)\r\n        );\r\n      }\r\n    }\r\n\r\n    //aux loop for changing the color to the finish color after completion\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      //push the change to the timeout array\r\n      timeouts.push(\r\n        setTimeout(() => {\r\n          arrayBars[i].style.backgroundColor = finish_color;\r\n        }, animations.length * this.state.speed + i * 2)\r\n      );\r\n    }\r\n\r\n    //changing the buttons back to enabled\r\n    timeouts.push(\r\n      setTimeout(() => {\r\n        //sliders\r\n        sliders[0].disabled = false;\r\n        sliders[1].disabled = false;\r\n\r\n        //buttons\r\n        buttons[0].disabled = false;\r\n        buttons[1].disabled = true;\r\n        buttons[2].disabled = true;\r\n        buttons[3].disabled = true;\r\n        buttons[4].disabled = true;\r\n      }, animations.length * this.state.speed + arrayBars.length * 2)\r\n    );\r\n    //setting the state of the timeouts\r\n    // eslint-disable-next-line\r\n    this.state.timeouts = timeouts;\r\n  }\r\n\r\n  handleChangeSize = (event, newValue) => {\r\n    this.setState({ array_size: newValue });\r\n  };\r\n\r\n  handleChangeSpeed = (event, newValue) => {\r\n    this.setState({ speed: newValue });\r\n  };\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: primary_color,\r\n              height: `${value}px`,\r\n            }}\r\n          ></div>\r\n        ))}\r\n        <div\r\n          className=\"array-bar\"\r\n          key=\"max-height-controller\"\r\n          style={{\r\n            backgroundColor: \"transparent\",\r\n            height: `${max_height_bar}px`,\r\n          }}\r\n        ></div>\r\n        <br></br>\r\n        <div className=\"footer\">\r\n          <div className=\"slider-div\">\r\n            <Typography>Size of Array</Typography>\r\n            <Slider\r\n              className=\"slider\"\r\n              onChange={this.handleChangeSize}\r\n              aria-labelledby=\"continuous-slider\"\r\n              min={10}\r\n              max={400}\r\n              defaultValue={250}\r\n            />\r\n          </div>\r\n          <button className=\"button\" onClick={() => this.resetArray()}>\r\n            Generate New Array\r\n          </button>\r\n          <button className=\"button\" onClick={() => this.mergeSort()}>\r\n            Merge Sort\r\n          </button>\r\n          <button className=\"button\" onClick={() => this.bubbleSort()}>\r\n            Bubble Sort\r\n          </button>\r\n          <button className=\"button\" onClick={() => this.quickSort()}>\r\n            Quick Sort\r\n          </button>\r\n          <button className=\"button\" onClick={() => this.cancelSort()}>\r\n            Cancel\r\n          </button>\r\n          <div className=\"slider-div\">\r\n            <Typography>Speed</Typography>\r\n            <Slider\r\n              className=\"slider\"\r\n              onChange={this.handleChangeSpeed}\r\n              aria-labelledby=\"continuous-slider\"\r\n              min={0.1}\r\n              max={10}\r\n              defaultValue={3}\r\n            ></Slider>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","export function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < array.length - i; j++) {\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      if (array[j] > array[j + 1]) {\r\n        animations.push([j, array[j + 1]]);\r\n        let temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      } else {\r\n        animations.push([j, array[j]]);\r\n      }\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}